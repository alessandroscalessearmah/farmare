<?php

/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HeroiconsOutline;
use Magento\Catalog\Block\Product\View\Gallery;
use Magento\Catalog\Helper\Image;
use Magento\Framework\Escaper;

/** @var Escaper $escaper */
/** @var Gallery $block */
/** @var ViewModelRegistry $viewModels */

/** @var HeroiconsOutline $heroicons */
$heroicons = $viewModels->require(HeroiconsOutline::class);

$images = $block->getGalleryImages()->getItems();
$mainImage = current(array_filter($images, [$block, 'isMainImage']));

if (!empty($images) && empty($mainImage)) {
    $mainImage = reset($images);
}

/** @var Image $helper */
$helper = $block->getData('imageHelper');
$mainImageData = $mainImage ?
    $mainImage->getData('medium_image_url') :
    $helper->getDefaultPlaceholderUrl('image');

$smallWidth = $block->getImageAttribute('product_page_image_small', 'width', 90);
$smallHeight = $block->getImageAttribute('product_page_image_small', 'height', 90);
$mediumWidth = $block->getImageAttribute('product_page_image_medium', 'width', 700);
$mediumHeight = $block->getImageAttribute('product_page_image_medium', 'height', 700);

$productName = $block->getProduct()->getName();
$product = $block->getProduct();
$ingredients = $product->getAttributeText('farmaregno_ingredienti');
?>

<div id="gallery" x-data="initGallery()" x-init="initActive(); $nextTick(() => calcPageSize())" x-bind="eventListeners" class="order-1 w-full p-2 border lg:w-1/2 xl:w-[55%] md:h-full xl:h-auto rounded-3xl">
    <div :class="{'w-full h-full fixed block top-0 left-0 bg-white z-50 flex': fullscreen}">
        <div class="absolute top-0 right-0 pt-4 pr-4">
            <button @click="fullscreen = false; $nextTick(() => calcPageSize())" type="button" class="hidden text-gray-400 transition duration-150 ease-in-out hover:text-gray-500 focus:outline-none focus:text-gray-500" :class="{ 'hidden': !fullscreen, 'block': fullscreen }" aria-label="Close">
                <?= $heroicons->xHtml(); ?>
            </button>
        </div>

        <div class="relative self-center w-full" x-transition:enter="ease-out duration-500" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100">
            <div class="relative mb-6">
                <?= '<div class="absolute flex flex-col w-full gap-2" x-show="!fullscreen">'; ?>

                <?php
                $product = $this->getProduct();
                $regularPrice = (float)$product->getPriceInfo()->getPrice('regular_price')->getValue();
                $specialPrice = (float)$product->getPriceInfo()->getPrice('final_price')->getValue();

                if ($specialPrice < $regularPrice) {
                    $sconto = 100 - ($specialPrice / $regularPrice) * 100;
                } else {
                    $sconto = 0;
                }
                ?>
                <?php if ($sconto > 0) : ?>
                    <div class="z-20 flex items-center justify-end w-full px-4 py-1 text-2xl font-semibold tracking-tighter rounded-t-3xl bg-primary text-giallo lg:font-semibold lg:text-base lg:tracking-normal">
                        <?= $escaper->escapeHtml(__('Discounted by')); ?>
                        <?= number_format($sconto, 0, ',') . "% " ?>
                    </div>
                <?php endif; ?>

                <?php

                echo '<div class="flex flex-col gap-1 mt-2 ml-1">';

                if ($ingredients) {
                    if (is_array($ingredients)) {
                        foreach ($ingredients as $ingredient) {
                            $imageName = str_replace(' ', '-', strtolower($ingredient)) . '.png';
                            $imageUrl = $block->getViewFileUrl('images/' . $imageName);
                            echo '<img class="z-20 w-12 h-12 p-2 border rounded-lg" src="' . $imageUrl . '" alt="' . $ingredient . '" title="' . $ingredient . '"/>';
                        }
                    } else {
                        $imageName = str_replace(' ', '-', strtolower($ingredients)) . '.png';
                        $imageUrl = $block->getViewFileUrl('images/' . $imageName);
                        echo '<img class="z-20 w-12 h-12 p-2 border rounded-lg" src="' . $imageUrl . '" alt="' . $ingredients . '" title="' . $ingredients . '"/>';
                    }
                }
                echo '</div>';
                ?>

                <?= '</div>' ?>

                <?php
                /**
                 * The first image is a placeholder that determines the
                 * aspect ratio for the gallery. It will be hidden as
                 * soon as JS is loaded, but will keep reserving the
                 * necessary space in the layout for the other (absolute positioned)
                 * images. Hence, `opacity-0` instead of `x-show` or `hidden`
                 */
                ?>
                <img alt="main product photo" title="<?= $escaper->escapeHtmlAttr($productName) ?>" class="object-contain object-center w-full h-auto max-h-[70vh]" :class="'opacity-0'" src="<?= /* @noEscape */ $mainImageData ?>" width="<?= /* @noEscape */ $mediumWidth ?>" height="<?= /* @noEscape */ $mediumHeight ?>" itemprop="image" @click="fullscreen = true; $nextTick(() => calcPageSize())" />
                <template x-for="(image, index) in images" :key="index">
                    <img :alt="image.caption || '<?= $escaper->escapeJs($productName) ?>'" :title="image.caption || '<?= $escaper->escapeJs($productName) ?>'" @click="fullscreen = true; $nextTick(() => calcPageSize())" class="absolute inset-x-0 bottom-0 object-contain object-center w-full m-auto top-16 max-h-[69vw] sm:max-h-[70vh] lg:max-h-[55vh] xl:max-h-[70vh]" :class="{ 'cursor-pointer': !fullscreen }" width="<?= /* @noEscape */ $mediumWidth ?>" height="<?= /* @noEscape */ $mediumHeight ?>" :loading="active!==index ? 'lazy' : 'eager'" :src="fullscreen ? image.full : image.img" x-transition.opacity.duration.500ms x-show="active===index" />
                </template>
                <div class="absolute inset-0 hidden w-full h-full bg-white nonmobile" :class="{ 'hidden': activeVideoType !== 'youtube' }" x-transition.opacity.duration.500ms x-show="
                         images[active].type === 'video' && activeVideoType === 'youtube'
                     ">
                    <div id="youtube-player" class="w-full h-full"></div>
                </div>
                <div class="absolute inset-0 hidden w-full h-full bg-white" :class="{ 'hidden': activeVideoType !== 'vimeo' }" x-transition.opacity.duration.500ms x-show="
                         images[active].type === 'video' && activeVideoType === 'vimeo'
                     ">
                    <div id="vimeo-player" class="w-full h-full"></div>
                </div>
            </div>
        </div>
        <div @resize.window.debounce="calcPageSize(); $nextTick(() => calcActive())">

        </div>
    </div>
</div>
<script>
    function initGallery() {
        return {
            "active": 0,
            "videoData": {},
            "activeVideoType": false,
            "autoplayVideo": false,
            "loopVideo": true,
            "relatedVideos": false,
            "vimeoPlayer": null,
            "fullscreen": false,
            "isSlider": false,
            "initialImages": <?= /* @noEscape */ $block->getGalleryImagesJson() ?>,
            "images": <?= /* @noEscape */ $block->getGalleryImagesJson() ?>,
            "appendOnReceiveImages": <?=
                                        $block->getVar('gallery_switch_strategy', 'Magento_ConfigurableProduct') === 'append' ? 'true' : 'false'
                                        ?>,
            "activeSlide": 0,
            "itemCount": 0,
            "pageSize": 4,
            "pageFillers": 0,
            receiveImages(images) {
                if (this.appendOnReceiveImages) {
                    const initialUrls = this.initialImages.map(image => image.full);
                    const newImages = images.filter(image => !initialUrls.includes(image.full));
                    this.images = [].concat(this.initialImages, newImages);
                    this.setActive(newImages.length ? this.initialImages.length : 0);
                } else {
                    this.images = images;
                    this.setActive(0);
                }
            },
            resetGallery() {
                this.images = this.initialImages;
                this.setActive(0);
            },
            initActive() {
                let active = this.images.findIndex(function(image) {
                    return image.isMain === true
                });
                if (active === -1) {
                    active = 0;
                }
                this.setActive(active);
            },
            setActive(index) {
                this.active = index;
                if (window.youtubePlayer) {
                    window.youtubePlayer.stopVideo();
                }
                if (this.vimeoPlayer) {
                    this.vimeoPlayer.contentWindow.postMessage(JSON.stringify({
                        "method": "pause"
                    }), "*");
                }
                if (this.images[index].type === 'video') {
                    this.activateVideo();
                }
            },
            activateVideo() {
                const videoData = this.getVideoData();

                if (!videoData) {
                    return
                }

                this.activeVideoType = videoData.type;

                if (videoData.type === "youtube") {
                    if (!window.youtubePlayer) {
                        this.initYoutubeAPI(videoData);
                    } else {
                        window.youtubePlayer.loadVideoById(videoData.id);
                    }

                } else if (videoData.type === "vimeo") {
                    this.initVimeoVideo(videoData);
                }
            },
            getVideoData() {
                const videoUrl = this.images[this.active] && this.images[this.active].videoUrl;

                if (!videoUrl) {
                    return
                }

                let id,
                    type,
                    youtubeRegex,
                    vimeoRegex,
                    useYoutubeNoCookie = false;

                if (videoUrl.match(/youtube\.com|youtu\.be|youtube-nocookie.com/)) {
                    id = videoUrl.replace(/^\/(embed\/|v\/)?/, '').replace(/\/.*/, '');
                    type = 'youtube';

                    youtubeRegex = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/)|(?:(?:watch)?\?v(?:i)?=|\&v(?:i)?=))([^#\&\?]*).*/;
                    id = videoUrl.match(youtubeRegex)[1];

                    if (videoUrl.match(/youtube-nocookie.com/)) {
                        useYoutubeNoCookie = true;
                    }
                } else if (videoUrl.match(/vimeo\.com/)) {
                    type = 'vimeo';
                    vimeoRegex = new RegExp(['https?:\\/\\/(?:www\\.|player\\.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)',
                        '?|groups\\/([^\\/]*)\\/videos\\/|album\\/(\\d+)\\/video\\/|video\\/|)(\\d+)(?:$|\\/|\\?)'
                    ].join(''));
                    id = videoUrl.match(vimeoRegex)[3];
                }

                return id ? {
                    id: id,
                    type: type,
                    useYoutubeNoCookie: useYoutubeNoCookie
                } : false;
            },
            initYoutubeAPI(videoData) {
                if (document.getElementById('loadYoutubeAPI')) {
                    return;
                }
                const params = {};
                const loadYoutubeAPI = document.createElement('script');
                loadYoutubeAPI.src = 'https://www.youtube.com/iframe_api';
                loadYoutubeAPI.id = 'loadYoutubeAPI';
                const firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(loadYoutubeAPI, firstScriptTag);

                const host = (videoData.useYoutubeNoCookie) ?
                    'https://www.youtube-nocookie.com' :
                    'https://www.youtube.com';

                if (this.autoplayVideo) {
                    params.autoplay = this.autoplayVideo;
                }
                if (!this.relatedVideos) {
                    params.rel = 0;
                }
                const fireYoutubeAPI = document.createElement('script');
                fireYoutubeAPI.innerHTML = `function onYouTubeIframeAPIReady() {
                    window.youtubePlayer = new YT.Player('youtube-player', {
                        host: '${host}',
                        videoId: '${videoData.id}',
                        playerVars: ${JSON.stringify(params)},
                    });
                }`;
                firstScriptTag.parentNode.insertBefore(fireYoutubeAPI, firstScriptTag);
            },
            initVimeoVideo(videoData) {
                let
                    additionalParams = '',
                    src;

                const timestamp = new Date().getTime();
                const vimeoContainer = document.getElementById("vimeo-player");
                const videoId = videoData.id;

                if (!vimeoContainer || !videoId) return;

                if (this.autoplayVideo) {
                    additionalParams += '&autoplay=1';
                }

                if (this.loopVideo) {
                    additionalParams += '&loop=1';
                }
                src = 'https://player.vimeo.com/video/' +
                    videoId + '?api=1&player_id=vimeo' +
                    videoId +
                    timestamp +
                    additionalParams;
                vimeoContainer.innerHTML =
                    `<iframe id="${'vimeo' + videoId + timestamp}"
                        src="${src}"
                        width="640" height="360"
                        webkitallowfullscreen
                        mozallowfullscreen
                        allowfullscreen
                        referrerPolicy="origin"
                        allow="autoplay"
                        class="object-center w-full h-full object-fit"
                     />`;

                this.vimeoPlayer = vimeoContainer.childNodes[0];
            },
            getSlider() {
                return this.$refs.jsThumbSlides;
            },
            calcPageSize() {
                const slider = this.getSlider();
                if (slider) {
                    const slideEl = slider.querySelector('.js_thumbs_slide'),
                        marginRight = parseInt(window.getComputedStyle(slideEl).marginRight);

                    this.itemCount = slider.querySelectorAll('.js_thumbs_slide').length;
                    this.pageSize = Math.round(slider.clientWidth / (slideEl.clientWidth + marginRight));
                    this.pageFillers = (
                        this.pageSize * Math.ceil(this.itemCount / this.pageSize)
                    ) - this.itemCount;

                    this.isSlider = ((slider.clientWidth - (this.itemCount * (slideEl.clientWidth + marginRight))) < 0);
                }
            },
            calcActive() {
                const slider = this.getSlider();
                if (slider) {
                    const sliderItems = this.itemCount + this.pageFillers;
                    const calculatedActiveSlide = slider.scrollLeft / (slider.scrollWidth / sliderItems);
                    this.activeSlide = Math.round(calculatedActiveSlide / this.pageSize) * this.pageSize;
                }
            },
            scrollPrevious() {
                this.scrollTo(this.activeSlide - this.pageSize);
            },
            scrollNext() {
                this.scrollTo(this.activeSlide + this.pageSize);
            },
            scrollTo(idx) {
                const slider = this.getSlider();
                if (slider) {
                    const slideWidth = slider.scrollWidth / (this.itemCount + this.pageFillers);
                    slider.scrollLeft = Math.floor(slideWidth) * idx;
                    this.activeSlide = idx;
                }
            },
            eventListeners: {
                ['@keydown.window.escape']() {
                    this.fullscreen = false
                },
                ['@update-gallery.window'](event) {
                    this.receiveImages(event.detail);
                },
                ['@reset-gallery.window'](event) {
                    this.resetGallery();
                }
            }
        }
    }
</script>